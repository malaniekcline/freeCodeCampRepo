# -*- coding: utf-8 -*-
"""Three Math Games.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1unSqN3rIRvV1gHzHYoO7vGBSzYwnmyp-
"""

import matplotlib.pyplot as plt
import random

# Scatter Plot Game
def scatter_plot_game():
    score = 0
    fig, ax = plt.subplots()

    xmin, xmax, ymin, ymax = -50, 50, -50, 50

    # Generate random points
    xpoint = random.randint(xmin, xmax)
    ypoint = random.randint(ymin, ymax)
    x = [xpoint]
    y = [ypoint]

    plt.axis([xmin, xmax, ymin, ymax])
    plt.plot([xmin, xmax], [0, 0], 'b')
    plt.plot([0, 0], [ymin, ymax], 'b')
    plt.plot(x, y, 'ro')

    plt.show()  # Display the plot with the random point before asking guesses

    guess = input(f"Enter the coordinates of the red point (x,y): ")
    guess_array = guess.split(",")
    xguess = int(guess_array[0])
    yguess = int(guess_array[1])

    if xguess == xpoint and yguess == ypoint:
        print("Correct!")
        score = 1
    else:
        print("Oops! Incorrect.")

    print(f"Your score: {score}/1")
    plt.show()

import sympy as sp

# Algebra Practice Game
x, y = sp.symbols('x y')

def generate_equation(step, max_value=100):
    a, b, c, d = [random.randint(-max_value, max_value) for _ in range(4)]

    if step == 1:
        eq = a*x + b
        print(f"Equation: {eq} = 0")
        return eq, a*x + b
    elif step == 2:
        eq = a*x + b*y + c
        print(f"Equation: {eq} = 0")
        return eq, a*x + b*y + c

def take_user_input(equation, max_value, user_ans, actual_ans):
    # Use random.randint within the subs() to get random values for x and y
    actual_ans = sp.simplify(
        equation.subs(
            {
                x: random.randint(-max_value, max_value),
                y: random.randint(-max_value, max_value)
            }
        )
    )
    if user_ans == actual_ans:
        print("Correct! Well done!")
    else:
        print(f"Oops! The correct answer is {actual_ans:.2f}.")
          # Use string formatting to print the answer with two decimal places.

def algebra_practice_game():
    print("Let's solve some algebraic equations together.")

    max_value = 200  # Set the maximum value for the integer coefficients.
    num_problems = 5  # Set the number of problems to solve.

    score = 0
    for _ in range(num_problems):
        # Generate a random equation and get the actual answer
        difficulty = random.randint(1, 2)
        eq, actual_ans = generate_equation(difficulty, max_value)

        # Take user input and check the answer
        user_ans = float(input("Enter your answer: "))
        take_user_input(eq, max_value, user_ans, actual_ans)

        # Check if the user's answer is correct and update the score accordingly
        if user_ans == actual_ans:
            score += 1

    print(f"You've completed the game! Your score is: {score}/{num_problems}")
    if score == num_problems:
        print("Perfect score! You are a math genius!")

import math
import matplotlib.pyplot as plt
from ipywidgets import interactive, FloatSlider, VBox
import random
import numpy as np

g = 9.81 # Gravitational acceleration (m/s^2)

def projectile_trajectory(a, b, c, time_range=None):
    if time_range is None: time_range = [0, 10]
    x = []
    y = []
    for t in time_range:
        x_val = (-b)/(2*a) if a!= 0 else 0
        y_val = (a*x_val**2) + (b*x_val) + c
        x.append(x_val)
        y.append(y_val)
    return x, y

def plot_game(a, b, c):
    plt.axis([0, 10, 0, 10])  # window size

    # Generate random wall height
    wall_height = generate_random_wall_height()
    wall_distance = 8

    plt.ion()
    plt.clf()
    fig, ax = plt.subplots()

    # Compute and plot the projectile path
    x, y = projectile_trajectory(a, b, c)

    x = np.linspace(-10, 10, 1000)
    ax.plot(x, a*x**2 + b*x + c, color='black')

    # Set plot boundaries
    ax.set_xlim(0, wall_distance + 4)
    ax.set_ylim(0, 20)

    # Plot the wall
    plt.axvline(x=wall_distance, color='black', linewidth=3)
    plt.show()

def generate_random_wall_height():
    return random.uniform(1, 10)

def projectile_game():
    wall_height = generate_random_wall_height()

    # Initial values for sliders (a, b, c)
    a_init = -5
    b_init = 15
    c_init = 0

    # interactive sliders for a, b, and c and plot
    a_slider = FloatSlider(min=-10, max=10, value=a_init, step=0.1, description='a:')
    b_slider = FloatSlider(min=-20, max=20, value=b_init, step=0.1, description='b:')
    c_slider = FloatSlider(min=-10, max=10, value=c_init, step=0.1, description='c:')

    interactive_ui = interactive(plot_game, a=a_slider, b=b_slider, c=c_slider)
    display(interactive_ui)

# driver code
if __name__ == "__main__":
    # scatter_plot_game()
    # algebra_practice_game()
    projectile_game()